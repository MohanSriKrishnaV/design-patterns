The **Decorator Design Pattern** is a **structural design pattern** that allows you to dynamically add behavior or responsibilities to objects without altering their existing code. It is one of the most flexible and powerful patterns in object-oriented programming, often used to extend the functionality of classes in a clean and maintainable way.

---

### Key Concepts of the Decorator Pattern
1. **Component**:
   - The base interface or abstract class that defines the behavior of the objects.

2. **Concrete Component**:
   - The core object that implements the `Component` interface. This is the object to which additional behaviors can be added.

3. **Decorator**:
   - A class that implements the `Component` interface and wraps a `Component` object. It adds new behavior before or after delegating to the wrapped object.

4. **Concrete Decorator**:
   - A specific implementation of the `Decorator` that adds additional behavior to the `Component`.

---

### Why Use the Decorator Pattern?
- **Open/Closed Principle**:
  - You can extend the behavior of objects without modifying their existing code.
- **Single Responsibility Principle**:
  - Each decorator class has a single responsibility (e.g., adding a specific behavior).
- **Dynamic Behavior**:
  - You can add or remove behaviors at runtime by wrapping objects with decorators.

---

### Example: Decorator Pattern in TypeScript

Let’s say you’re building a coffee shop application where you can customize a coffee with various add-ons (e.g., milk, sugar, whipped cream). Instead of creating a separate class for every possible combination, you can use the Decorator Pattern to dynamically add these behaviors.

---

#### Step 1: Define the Component Interface
The `Component` interface defines the common behavior for all coffee types.

```typescript
interface Coffee {
  cost(): number;
  description(): string;
}
```

---

#### Step 2: Create a Concrete Component
The `SimpleCoffee` class represents the base coffee without any add-ons.

```typescript
class SimpleCoffee implements Coffee {
  cost(): number {
    return 5; // Base cost of a simple coffee
  }

  description(): string {
    return "Simple Coffee";
  }
}
```

---

#### Step 3: Create a Base Decorator
The `CoffeeDecorator` class implements the `Coffee` interface and wraps a `Coffee` object.

```typescript
abstract class CoffeeDecorator implements Coffee {
  protected coffee: Coffee;

  constructor(coffee: Coffee) {
    this.coffee = coffee;
  }

  cost(): number {
    return this.coffee.cost();
  }

  description(): string {
    return this.coffee.description();
  }
}
```

---

#### Step 4: Create Concrete Decorators
Each concrete decorator adds a specific behavior (e.g., milk, sugar, whipped cream).

```typescript
class MilkDecorator extends CoffeeDecorator {
  cost(): number {
    return this.coffee.cost() + 2; // Add cost of milk
  }

  description(): string {
    return this.coffee.description() + ", Milk";
  }
}

class SugarDecorator extends CoffeeDecorator {
  cost(): number {
    return this.coffee.cost() + 1; // Add cost of sugar
  }

  description(): string {
    return this.coffee.description() + ", Sugar";
  }
}

class WhippedCreamDecorator extends CoffeeDecorator {
  cost(): number {
    return this.coffee.cost() + 3; // Add cost of whipped cream
  }

  description(): string {
    return this.coffee.description() + ", Whipped Cream";
  }
}
```

---

#### Step 5: Use the Decorators
You can now dynamically add behaviors to a `SimpleCoffee` object by wrapping it with decorators.

```typescript
// Create a simple coffee
let coffee: Coffee = new SimpleCoffee();
console.log(coffee.description(), "Cost:", coffee.cost()); // Output: Simple Coffee, Cost: 5

// Add milk
coffee = new MilkDecorator(coffee);
console.log(coffee.description(), "Cost:", coffee.cost()); // Output: Simple Coffee, Milk, Cost: 7

// Add sugar
coffee = new SugarDecorator(coffee);
console.log(coffee.description(), "Cost:", coffee.cost()); // Output: Simple Coffee, Milk, Sugar, Cost: 8

// Add whipped cream
coffee = new WhippedCreamDecorator(coffee);
console.log(coffee.description(), "Cost:", coffee.cost()); // Output: Simple Coffee, Milk, Sugar, Whipped Cream, Cost: 11
```

---

### How It Works
1. **Base Object**:
   - Start with a `SimpleCoffee` object.

2. **Wrap with Decorators**:
   - Each decorator wraps the previous object and adds its own behavior.

3. **Dynamic Behavior**:
   - You can add or remove decorators at runtime to change the behavior of the object.

---

### Real-World Use Cases
1. **GUI Frameworks**:
   - Add scrollbars, borders, or other features to UI components dynamically.

2. **Streams in I/O**:
   - Add buffering, compression, or encryption to input/output streams.

3. **Middleware in Web Frameworks**:
   - Add logging, authentication, or caching to HTTP requests.

4. **Text Formatting**:
   - Add bold, italic, or underline formatting to text.

---

### Benefits of the Decorator Pattern
1. **Flexibility**:
   - You can add or remove behaviors dynamically at runtime.

2. **Avoids Class Explosion**:
   - Instead of creating a separate class for every combination of behaviors, you can use decorators to mix and match.

3. **Single Responsibility**:
   - Each decorator has a single responsibility, making the code easier to maintain.

4. **Open/Closed Principle**:
   - You can extend the behavior of objects without modifying their existing code.

---

### Limitations of the Decorator Pattern
1. **Complexity**:
   - The code can become harder to understand if there are too many decorators.

2. **Order Matters**:
   - The order in which decorators are applied can affect the final behavior.

3. **Performance Overhead**:
   - Each decorator adds a layer of indirection, which can impact performance.

---

### Example: Text Formatting with Decorators
Let’s say you’re building a text editor where you can apply formatting (e.g., bold, italic, underline) to text.

#### Step 1: Define the Component Interface
```typescript
interface Text {
  format(): string;
}
```

#### Step 2: Create a Concrete Component
```typescript
class PlainText implements Text {
  constructor(private content: string) {}

  format(): string {
    return this.content;
  }
}
```

#### Step 3: Create a Base Decorator
```typescript
abstract class TextDecorator implements Text {
  constructor(protected text: Text) {}

  format(): string {
    return this.text.format();
  }
}
```

#### Step 4: Create Concrete Decorators
```typescript
class BoldDecorator extends TextDecorator {
  format(): string {
    return `<b>${this.text.format()}</b>`;
  }
}

class ItalicDecorator extends TextDecorator {
  format(): string {
    return `<i>${this.text.format()}</i>`;
  }
}

class UnderlineDecorator extends TextDecorator {
  format(): string {
    return `<u>${this.text.format()}</u>`;
  }
}
```

#### Step 5: Use the Decorators
```typescript
let text: Text = new PlainText("Hello, World!");

// Add bold formatting
text = new BoldDecorator(text);
console.log(text.format()); // Output: <b>Hello, World!</b>

// Add italic formatting
text = new ItalicDecorator(text);
console.log(text.format()); // Output: <i><b>Hello, World!</b></i>

// Add underline formatting
text = new UnderlineDecorator(text);
console.log(text.format()); // Output: <u><i><b>Hello, World!</b></i></u>
```

---

### Summary
The **Decorator Design Pattern** is a powerful way to add behavior to objects dynamically. It promotes flexibility, maintainability, and adherence to the **Open/Closed Principle**. By using decorators, you can avoid class explosion and keep your code clean and modular.


